@model ShishaBuilder.Core.Models.Order
@using ShishaBuilder.Core.Enums

@{
    ViewData["Title"] = "Order Details";
}

<div class="container mt-4">
    <div class="card">
        <div class="card-header bg-primary text-white">
            <h3>Order #@Model.Id</h3>
        </div>
        
        <div class="card-body">
            <div class="row mb-4">
                <div class="col-md-6">
                    <h5>Basic Information</h5>
                    <dl class="row">
                        <dt class="col-sm-4">Created At:</dt>
                        <dd class="col-sm-8">@Model.CreatedAt.ToString("g")</dd>
                        
                        <dt class="col-sm-4">Status:</dt>
                        <dd class="col-sm-8">
                            <span class="badge @GetStatusBadgeClass(Model.OrderStatus)">
                                @Model.OrderStatus
                            </span>
                        </dd>
                        
                        <dt class="col-sm-4">Hookah ID:</dt>
                        <dd class="col-sm-8">@Model.HookahId</dd>
                        
                        <dt class="col-sm-4">Table ID:</dt>
                        <dd class="col-sm-8">@Model.TableId</dd>
                        
                        <dt class="col-sm-4">Master ID:</dt>
                        <dd class="col-sm-8">@Model.MasterId</dd>
                    </dl>
                </div>
            </div>
            
            <div class="row">
                <div class="col-12">
                    <h5>Tobacco Mix</h5>
                    @{
                        var tobaccos = Model.OrderTobaccos?.ToList() ?? new List<OrderTobacco>();
                    }
                    
                    @if (tobaccos.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-bordered">
                                <thead class="thead-light">
                                    <tr>
                                        <th>Tobacco</th>
                                        <th>Brand</th>
                                        <th>Flavor</th>
                                        <th>Strength</th>
                                        <th>Percentage</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in tobaccos)
                                    {
                                        <tr>
                                            <td>@(item.Tobacco?.Name ?? "Unknown")</td>
                                            <td>@(item.Tobacco?.Brand ?? "-")</td>
                                            <td>@(item.Tobacco?.Flavor ?? "-")</td>
                                            <td>@(item.Tobacco?.Strength ?? "-")</td>
                                            <td>@item.Percentage%</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        
                        <div class="mt-3">
                            <strong>Total Mix:</strong>
                            @tobaccos.Sum(t => t.Percentage)%
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle"></i>
                            <strong>Warning:</strong> This order has no tobaccos specified. This might indicate a system error.
                        </div>
                    }
                </div>
            </div>
        </div>
        
        <div class="card-footer">
            <a asp-action="AllOrders" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> Back to Orders
            </a>
        </div>
    </div>
</div>

@functions {
    string GetStatusBadgeClass(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Completed => "badge-success",
            OrderStatus.InProgress => "badge-primary",
            OrderStatus.Pending => "badge-warning",
            OrderStatus.Cancelled => "badge-danger",
            _ => "badge-secondary"
        };
    }
}

<style>
    .badge {
        font-size: 0.9em;
        padding: 0.5em 0.75em;
        text-transform: capitalize;
    }
    dt {
        font-weight: 500;
    }
    .card-header h3 {
        margin-bottom: 0;
    }
    .alert-warning {
        background-color: #fff3cd;
        border-color: #ffeeba;
    }
</style>